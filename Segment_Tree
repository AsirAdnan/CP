#include<iostream>
using namespace std;
int arr[100];
int tree[300];
void build(int idx,int b,int e)
{
    if (b==e) {
        tree[idx]=arr[b];
        return;
    }
    int left=idx*2,right=idx*2+1,mid=(b+e)/2;
    build(left,b,mid);
    build(right,mid+1,e);
    tree[idx]=tree[left]+tree[right];
}
int query(int idx,int b,int e,int l,int r)
{
    if (b>r || e<l) return 0;
    if (r>=e && l<=b) return tree[idx];
    int left=idx*2,right=idx*2+1,mid=(b+e)/2;
    int left_sum=query(left,b,mid,l,r);
    int right_sum=query(right,mid+1,e,l,r);
    return left_sum+right_sum;
}
void update(int idx,int b,int e,int pos,int value)
{
    if (pos<b || e<pos) return;
    if (b==e && pos==e){
        tree[idx]=value;
        return;
    }
    int left=idx*2,right=idx*2+1,mid=(b+e)/2;
    update(left,b,mid,pos,value);
    update(right,mid+1,e,pos,value);
    tree[idx]=tree[left]+tree[right];
}
int main()
{
    int n;
    cin>>n;
    for (int i=1;i<=n;i++) cin>>arr[i];
    build(1,1,n);
    for (int i=0;i<=3*n;i++) cout<<tree[i]<<' ';
    cout<<endl<<query(1,1,n,2,5)<<endl;
    update(1,1,n,3,100);
    for (int i=0;i<=3*n;i++) cout<<tree[i]<<' ';
}
