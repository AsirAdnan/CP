#include <iostream>
#include<vector>
using namespace std;
using ll=long long;
vector<ll> arr,tree;
void build(int idx,int b,int e)
{
    if (b==e) {
        tree[idx]=arr[b];
        return;
    }
    int left=idx*2,right=idx*2+1,mid=(b+e)/2;
    build(left,b,mid);
    build(right,mid+1,e);
    tree[idx]=tree[left]+tree[right];
}
void update(int idx,int b,int e,int pos,int value)
{
    if (pos<b || e<pos) return;
    if (b==e && b==pos){
        tree[idx]=value;
        return;
    }
    int left=idx*2,right=idx*2+1,mid=(b+e)/2;
    update(left,b,mid,pos,value);
    update(right,mid+1,e,pos,value);
    tree[idx]=tree[left]+tree[right];
}
ll query(int idx,int b,int e,int l, int r)
{
    if (r<b || e<l) return 0;
    if (l<=b && e<=r) return tree[idx];
    int left=idx*2,right=idx*2+1,mid=(b+e)/2;
    ll left_sum=query(left,b,mid,l,r);
    ll right_sum=query(right,mid+1,e,l,r);
    return left_sum+right_sum;
}
int main()
{
    int n,q;
    cin>>n>>q;
    arr.resize(n+1);
    tree.resize(3*n);
    for (int i=1;i<=n;i++) cin>>arr[i];
    build(1,1,n);
    while(q--){
        int a,b,c;
        cin>>a>>b>>c;
        if (a==1) update(1,1,n,b,c);
        else cout<<query(1,1,n,b,c)<<endl;
    }
}
